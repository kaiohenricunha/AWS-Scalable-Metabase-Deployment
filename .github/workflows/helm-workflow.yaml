name: Helm Infrastructure Management

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'
  EKS_CLUSTER_NAME: 'metabase-lab'
  RDS_ENDPOINT: ${{ secrets.RDS_ENDPOINT }}
  RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_USERNAME: ${{ secrets.DB_USERNAME }}
  DB_PORT: ${{ secrets.DB_PORT }}
  TF_VAR_db_name: ${{ secrets.DB_NAME }}
  TF_VAR_db_username: ${{ secrets.DB_USERNAME }}
  TF_VAR_db_port: ${{ secrets.DB_PORT }}
  TF_VAR_rds_endpoint: ${{ secrets.RDS_ENDPOINT }}
  TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}

on:
  workflow_dispatch:
    inputs:
      helm_action:
        description: 'Helm action to perform (plan/apply/uninstall)'
        required: true
        default: 'plan'

jobs:
  helm:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      - name: Update kube config
        run: aws eks update-kubeconfig --name $EKS_CLUSTER_NAME --region $AWS_DEFAULT_REGION

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: 'v3.5.4'

      - name: Helm Operation for Metrics Server
        run: |
          helm repo add metrics-server https://kubernetes-sigs.github.io/metrics-server/
          helm repo update
          cd helm/metrics-server
          if [ "${{ github.event.inputs.helm_action }}" == "plan" ]; then
            helm template metrics-server . --namespace kube-system -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "apply" ]; then
            helm install metrics-server . --namespace kube-system -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "uninstall" ]; then
            helm uninstall metrics-server --namespace kube-system
          fi

      - name: Helm Operation for Kube-Prometheus-Stack
        run: |
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          cd helm/kube-prometheus-stack
          if [ "${{ github.event.inputs.helm_action }}" == "plan" ]; then
            helm template kube-prometheus-stack . --namespace monitoring -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "apply" ]; then
            helm install kube-prometheus-stack . --namespace monitoring -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "uninstall" ]; then
            helm uninstall kube-prometheus-stack --namespace monitoring
          fi

      - name: Helm Operation for Metabase
        run: |
          helm repo add pmint93 https://pmint93.github
          .github.io/helm-charts
          helm repo update
          cd helm/metabase
          if [ "${{ github.event.inputs.helm_action }}" == "plan" ]; then
            helm template metabase pmint93/metabase --namespace metabase -f values.yaml \
              --set database.host=${{ secrets.RDS_ENDPOINT }},\
              --set database.port=${{ secrets.DB_PORT }},\
              --set database.dbname=${{ secrets.DB_NAME }},\
              --set database.username=${{ secrets.DB_USERNAME }},\
              --set database.password=${{ secrets.RDS_PASSWORD }}
          elif [ "${{ github.event.inputs.helm_action }}" == "apply" ]; then
            helm install metabase pmint93/metabase --namespace metabase -f values.yaml \
              --set database.host=${{ secrets.RDS_ENDPOINT }},\
              --set database.port=${{ secrets.DB_PORT }},\
              --set database.dbname=${{ secrets.DB_NAME }},\
              --set database.username=${{ secrets.DB_USERNAME }},\
              --set database.password=${{ secrets.RDS_PASSWORD }}
          elif [ "${{ github.event.inputs.helm_action }}" == "uninstall" ]; then
            helm uninstall metabase --namespace metabase
          fi

      # Helm Operation for KEDA
      - name: Helm Operation for KEDA
        run: |
          helm repo add kedacore https://kedacore.github.io/charts
          helm repo update
          cd helm/keda
          if [ "${{ github.event.inputs.helm_action }}" == "plan" ]; then
            helm template keda kedacore/keda --namespace keda -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "apply" ]; then
            helm install keda kedacore/keda --namespace keda -f values.yaml
          elif [ "${{ github.event.inputs.helm_action }}" == "uninstall" ]; then
            # Delete any ScaledObjects and ScaledJobs
            kubectl delete $(kubectl get scaledobjects.keda.sh,scaledjobs.keda.sh -A \
              -o jsonpath='{"-n "}{.items[*].metadata.namespace}{" "}{.items[*].kind}{"/"}{.items[*].metadata.name}{"\n"}') || true
            # Uninstall KEDA Helm chart
            helm uninstall keda -n keda || true
            # Patch resources if they are orphaned
            for i in $(kubectl get scaledobjects -A \
              -o jsonpath='{"-n "}{.items[*].metadata.namespace}{" "}{.items[*].kind}{"/"}{.items[*].metadata.name}{"\n"}');
            do kubectl patch $i -p '{"metadata":{"finalizers":null}}' --type=merge || true
            done
            for i in $(kubectl get scaledjobs -A \
              -o jsonpath='{"-n "}{.items[*].metadata.namespace}{" "}{.items[*].kind}{"/"}{.items[*].metadata.name}{"\n"}');
            do kubectl patch $i -p '{"metadata":{"finalizers":null}}' --type=merge || true
            done
          fi

      - name: Install Istio CLI
        run: |
          curl -L https://istio.io/downloadIstio | ISTIO_VERSION=1.10.0 sh -
          echo "$HOME/istio-1.10.0/bin" >> $GITHUB_PATH

      - name: Install Istio
        run: istioctl manifest install
